<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .model-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }


</style>

<div class="container py-4">
    <div class="bg-white p-5 rounded shadow-sm">
        <h2 class="mb-4">Upload Dataset</h2>

        <!-- Upload Form -->
        <form id="uploadForm">
            <div class="mb-3">
                <input type="file" class="form-control" name="file" required />
            </div>
            <button type="submit" class="btn btn-primary"><i class="bi bi-cloud-upload"></i> Upload and Train</button>
        </form>

        <!-- Model Results -->
        <div id="modelResults" class="mt-5" style="display:none;">
            <h4 class="mb-3">Trained Models</h4>
            <div id="modelsContainer" class="row g-3"></div>

            <button class="btn btn-success mt-4" data-bs-toggle="modal" data-bs-target="#selectModelModal">
                <i class="bi bi-check-circle"></i> Choose Best Model
            </button>
        </div>
    </div>
</div>

<!-- Loader -->
<div id="loader" class="text-center my-4" style="display: none;">
    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Training models, please wait...</p>
</div>


<!-- Choose Model Modal -->
<div class="modal fade" id="selectModelModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-list-check"></i> Select Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-check mb-2">
                    <input class="form-check-input" type="radio" name="modelOption" value="1" id="model1">
                    <label class="form-check-label" for="model1"><i class="bi bi-1-circle"></i> Model 1</label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="radio" name="modelOption" value="2" id="model2">
                    <label class="form-check-label" for="model2"><i class="bi bi-2-circle"></i> Model 2</label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="radio" name="modelOption" value="3" id="model3">
                    <label class="form-check-label" for="model3"><i class="bi bi-3-circle"></i> Model 3</label>
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="radio" name="modelOption" value="4" id="model4">
                    <label class="form-check-label" for="model4"><i class="bi bi-4-circle"></i> Model 4</label>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="selectModel()"><i class="bi bi-check2"></i> Confirm</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
       document.getElementById("uploadForm").addEventListener("submit", async function (e) {
      e.preventDefault();
      const formData = new FormData(this);

      // Show loader
      document.getElementById("loader").style.display = "block";
      document.getElementById("modelResults").style.display = "none";

      try {
        const response = await fetch("http://127.0.0.1:8000/admin/upload-dataset", {
          method: "POST",
          body: formData
        });

        // Hide loader
        document.getElementById("loader").style.display = "none";

        if (response.ok) {
          const data = await response.json();
          showToast("Success", "Dataset uploaded and models trained!", "success");
          displayModels(data.models);
        } else {
          showToast("Error", "Failed to upload dataset.", "error");
        }
      } catch (error) {
        document.getElementById("loader").style.display = "none";
        showToast("Error", "Something went wrong!", "error");
      }
    });


    function displayModels(models) {
      const container = document.getElementById("modelsContainer");
      container.innerHTML = "";
      document.getElementById("modelResults").style.display = "block";
         const pastelColors = [
      '#a8dadc', // soft teal
      '#f1faee', // almost white
      '#ffd6a5', // light orange
      '#caffbf', // mint green
      '#9bf6ff', // baby blue
      '#bdb2ff', // soft lavender
      '#ffc6ff'  // pale pink
    ];

       let index = 0;

    for (let key in models) {
      const model = models[key];
      const bgColor = pastelColors[index % pastelColors.length];
      const cardNumber = index + 1;

      container.innerHTML += `
        <div class="col-md-6 mb-4">
          <div class="card text-dark p-4 h-100 model-card position-relative shadow-sm" style="background-color: ${bgColor}; transition: 0.3s;">
            <div class="position-absolute top-0 start-0 display-1 ps-3 pt-2" style="font-size: 5rem; opacity: 0.1;">${cardNumber}</div>
            <h5 class="card-title mt-4">${model.name}</h5>
            <p><strong>Sales MSE:</strong> ${model.sales_mse}</p>
            <p><strong>Profit MSE:</strong> ${model.profit_mse}</p>
            <p><strong>Sales Accuracy:</strong> ${model.sales_accuracy}</p>
            <p><strong>Profit Accuracy:</strong> ${model.profit_accuracy}</p>
          </div>
        </div>
      `;

      index++;
    }



    }

    async function selectModel() {
      const selected = document.querySelector('input[name="modelOption"]:checked');
      if (!selected) {
        return showToast("Warning", "Please choose a model (1-4)", "warning");
      }

      const number = parseInt(selected.value);
      const res = await fetch("http://127.0.0.1:8000/admin/select-model", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ model_number: number })
      });

      if (res.ok) {
        showToast("Success", `Model ${number} selected successfully!`, "success");
        const modal = bootstrap.Modal.getInstance(document.getElementById('selectModelModal'));
        modal.hide();
      } else {
        showToast("Error", "Failed to select model.", "error");
      }
    }

    function showToast(title, text, icon) {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: icon,
        title: title,
        text: text,
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true
      });
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
